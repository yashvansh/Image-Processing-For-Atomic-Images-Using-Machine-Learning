# -*- coding: utf-8 -*-
"""DC_B22MT047_Dr._DEVENDRA_NEGI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hKHHXvy_VVHNU3sdQ9Pc8N5aOOXVyK-y

# DATA GENERATION
"""

import cv2
import numpy as np
import os

# Load the image
image_path = r"/content/full_TEM_image_1.jpg"
original_image = cv2.imread(image_path)

#Directory to save the generated images
output_directory = r"C:\Users\HP\Desktop\DC 2024"
os.makedirs(output_directory, exist_ok=True)

# Number of samples to generate
num_samples = 500

# Standard deviation of the Gaussian noise
noise_std = 20

# Generate and save the samples
for i in range(num_samples):
    # Generate Gaussian noise
    noise = np.random.normal(0, noise_std, original_image.shape).astype(np.uint8)

    # Add noise to the original image
    noisy_image = cv2.add(original_image, noise)

    # Save the noisy image
    output_path = os.path.join(output_directory, f"noisy_image_{i+1}.jpg")
    cv2.imwrite(output_path, noisy_image)

print(f"{num_samples} noisy images generated and saved in {output_directory}")

"""DENOISIFY THE IMAGES"""

import cv2
import numpy as np
import os

# Function to denoise an image using Non-Local Means Denoising
def denoise_image(image):
    return cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)

# Function to enhance image clarity
def enhance_clarity(image):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply histogram equalization
    equalized = cv2.equalizeHist(gray)

    # Convert back to color
    enhanced_image = cv2.cvtColor(equalized, cv2.COLOR_GRAY2BGR)

    return enhanced_image

# Load the image
image_path = r"/content/full_TEM_image_1.jpg"
original_image = cv2.imread(image_path)

# Directory to save the denoised and enhanced images
output_directory = r"C:\Users\HP\Desktop\DC 2024\denoised_and_enhanced_images"
os.makedirs(output_directory, exist_ok=True)

# Number of samples to generate
num_samples = 500

# Standard deviation of the Gaussian noise
noise_std = 20

# Denoise, enhance clarity, and save the images
for i in range(num_samples):
    # Generate Gaussian noise
    noise = np.random.normal(0, noise_std, original_image.shape).astype(np.uint8)

    # Add noise to the original image
    noisy_image = cv2.add(original_image, noise)

    # Denoise the noisy image
    denoised_image = denoise_image(noisy_image)

    # Enhance clarity
    final_image = enhance_clarity(denoised_image)

    # Save the final image
    output_path = os.path.join(output_directory, f"final_image_{i+1}.jpg")
    cv2.imwrite(output_path, final_image)

print(f"{num_samples} noisy images denoised and enhanced. Final images saved in {output_directory}")